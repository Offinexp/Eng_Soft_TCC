name: Testes de Segurança com DVWA

on:
  push:
  pull_request:

jobs:
  sqli-tests:
    runs-on: ubuntu-latest

    # Define o container de serviço para o DVWA
    services:
      dvwa:
        image: vulnerables/web-dvwa

        ports:
          - 8080:80
        options: --health-cmd "curl -f http://localhost/setup.php || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Resetar o banco de dados do DVWA
        run: |
          echo "Serviço DVWA passou na verificação de saúde. Aguardando inicialização completa..."
          sleep 15
          
          echo "Enviando requisição para criar/resetar o banco de dados..."
          # Acessa o serviço via localhost na porta mapeada.
          # O -L segue redirecionamentos, o que é importante caso o setup redirecione para o login.
          curl -s -L -X POST http://localhost:8080/setup.php --data "create_db=Create+%2F+Reset+Database"
          
          echo "Banco de dados resetado. Aguardando 20 segundos para a aplicação estabilizar..."
          sleep 20

      - name: Verificar se a página de login está pronta
        run: |
          echo "Verificando se a página de login está acessível após o reset do DB..."
          # O grep -i torna a busca por "Login" case-insensitive, o que é mais robusto.
          curl -s --fail http://localhost:8080/login.php | grep -i "Login"

      - name: Rodar testes de SQL Injection
        # Define a variável de ambiente para que os testes saibam onde encontrar o DVWA.
        env:
          BASE_URL: "http://localhost:8080"
        run: |
          pytest -s -vv
