name: Testes de Segurança com DVWA

# Define os gatilhos para o workflow
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  sqli-tests:
    runs-on: ubuntu-latest

    services:
      dvwa:
        image: vulnerables/web-dvwa
        ports:
          - 8080:80

    steps:
      - name: 1. Checkout do código
        uses: actions/checkout@v4

      - name: 2. Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 3. Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 4. Aguardar DVWA e Resetar Banco de Dados
        run: |
          echo "Aguardando o serviço DVWA ficar disponível..."
          for i in {1..24}; do
            if curl -s --fail http://localhost:8080/login.php > /dev/null; then
              echo "DVWA está online!"
              break
            fi
            echo "Tentativa $i/24: DVWA ainda não respondeu. Aguardando 5 segundos..."
            sleep 5
          done

          if ! curl -s --fail http://localhost:8080/login.php > /dev/null; then
            echo "::error::O serviço DVWA não ficou disponível após 2 minutos."
            exit 1
          fi
          
          echo "Obtendo token CSRF da página de setup..."
          USER_TOKEN=$(curl -s -c cookies.txt http://localhost:8080/setup.php | grep 'user_token' | sed -n "s/.*value='\(.*\)'.*/\1/p")
          
          if [ -z "$USER_TOKEN" ]; then
            echo "::error::Falha ao obter o token CSRF (user_token) da página de setup."
            exit 1
          fi
          echo "Token CSRF obtido com sucesso."

          echo "Enviando requisição para criar/resetar o banco de dados..."
          curl -s -L -b cookies.txt -X POST http://localhost:8080/setup.php \
            --data-urlencode "user_token=${USER_TOKEN}" \
            --data-urlencode "create_db=Create / Reset Database"
          
          echo "Banco de dados resetado. Aguardando 20 segundos para a aplicação estabilizar..."
          sleep 20

      - name: 5. Verificar se a página de login está pronta
        run: |
          echo "Verificando se a página de login está acessível após o reset do DB..."
          curl -s --fail http://localhost:8080/login.php | grep -i "Login"

      - name: 6. Rodar testes e Gerar Relatório
        env:
          BASE_URL: "http://localhost:8080"
        run: pytest --html=report.html --self-contained-html
        continue-on-error: true

      - name: 7. Fazer o upload do Relatório HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Relatorio-Testes-SQL-Injection
          path: report.html